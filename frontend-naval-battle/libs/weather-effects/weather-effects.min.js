(function (window) {
    function Weather(options) {
      this.options = options || {};
      this.type = this.options.type || 'rain';
      this.container = this.options.container || document.body;
      this.canvas = document.createElement('canvas');
      this.ctx = this.canvas.getContext('2d');
      this.container.appendChild(this.canvas);
      this.canvas.style.position = 'absolute';
      this.canvas.style.top = 0;
      this.canvas.style.left = 0;
      this.canvas.style.pointerEvents = 'none';
      this.resize();
      window.addEventListener('resize', this.resize.bind(this));
      this.particles = [];
      this.angle = 0;
      this.animate = this.animate.bind(this);
    }
  
    Weather.prototype.resize = function () {
      this.canvas.width = this.container.offsetWidth;
      this.canvas.height = this.container.offsetHeight;
    };
  
    Weather.prototype.start = function () {
      cancelAnimationFrame(this.frame);
      this.generateParticles();
      this.animate();
    };
  
    Weather.prototype.generateParticles = function () {
      const count = 100;
      this.particles = [];
  
      if (this.type === 'rain') {
        for (let i = 0; i < count; i++) {
          this.particles.push({
            x: Math.random() * this.canvas.width,
            y: Math.random() * this.canvas.height,
            speedY: 2 + Math.random() * 4,
            length: 10 + Math.random() * 20,
          });
        }
      } else if (this.type === 'cloud') {
        for (let i = 0; i < 5; i++) {
          const baseX = Math.random() * this.canvas.width;
          const baseY = Math.random() * this.canvas.height * 0.9;
          const speedX = 0.2 + Math.random() * 0.3;
          const cloud = [];
          const puffCount = 5 + Math.floor(Math.random() * 3);
          for (let j = 0; j < puffCount; j++) {
            cloud.push({
              x: baseX + Math.random() * 100 - 50,
              y: baseY + Math.random() * 100 - 50,
              r: 60 + Math.random() * 30,
              speedX: speedX
            });
          }
          this.particles.push(cloud);
        }
      }
    };
  
    Weather.prototype.animate = function () {
      const ctx = this.ctx;
      ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
  
      if (this.type === 'rain') {
        ctx.strokeStyle = 'rgba(173,216,230,0.5)';
        ctx.lineWidth = 1;
        for (let p of this.particles) {
          ctx.beginPath();
          ctx.moveTo(p.x, p.y);
          ctx.lineTo(p.x, p.y + p.length);
          ctx.stroke();
          p.y += p.speedY;
          if (p.y > this.canvas.height) {
            p.y = -p.length;
            p.x = Math.random() * this.canvas.width;
          }
        }
      } else if (this.type === 'cloud') {
        for (let cloud of this.particles) {
          for (let puff of cloud) {
            puff.x += puff.speedX;
            if (puff.x - puff.r > this.canvas.width) {
              puff.x = -puff.r;
            }
            const gradient = ctx.createRadialGradient(
              puff.x,
              puff.y,
              puff.r * 0.2,
              puff.x,
              puff.y,
              puff.r
            );
            gradient.addColorStop(0, 'rgba(255, 255, 255, 0.85)');
            gradient.addColorStop(1, 'rgba(200, 200, 200, 0.5)');
            ctx.fillStyle = gradient;
            ctx.beginPath();
            ctx.arc(puff.x, puff.y, puff.r, 0, Math.PI * 2);
            ctx.fill();
          }
        }
      } else if (this.type === 'sun') {
        const centerX = this.canvas.width / 2;
        const centerY = this.canvas.height * 0.2;
        const sunRadius = 50;
        const rayCount = 20;
        const rayLength = 150;
        const rayWidth = 2;
  
        for (let i = 0; i < rayCount; i++) {
          const angle = (Math.PI * 2 * i) / rayCount;
          const startX = centerX + Math.cos(angle) * sunRadius;
          const startY = centerY + Math.sin(angle) * sunRadius;
          const endX = centerX + Math.cos(angle) * (sunRadius + rayLength);
          const endY = centerY + Math.sin(angle) * (sunRadius + rayLength);
          ctx.strokeStyle = 'rgba(255, 215, 0, 0.3)';
          ctx.lineWidth = rayWidth;
          ctx.beginPath();
          ctx.moveTo(startX, startY);
          ctx.lineTo(endX, endY);
          ctx.stroke();
        }
  
        const gradient = ctx.createRadialGradient(
          centerX,
          centerY,
          sunRadius * 0.4,
          centerX,
          centerY,
          sunRadius
        );
        gradient.addColorStop(0, 'rgba(255, 248, 181, 0.6)');
        gradient.addColorStop(1, 'rgba(249, 212, 35, 0.6)');
        ctx.fillStyle = gradient;
        ctx.beginPath();
        ctx.arc(centerX, centerY, sunRadius, 0, Math.PI * 2);
        ctx.fill();
      }
  
      this.frame = requestAnimationFrame(this.animate);
    };
  
    window.Weather = Weather;
  })(window);